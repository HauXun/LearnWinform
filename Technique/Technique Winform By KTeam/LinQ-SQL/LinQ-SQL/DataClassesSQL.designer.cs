#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LinQ_SQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;


	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name = "TestProjectDB")]
	public partial class DataClassesSQLDataContext : System.Data.Linq.DataContext
	{

		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

		#region Extensibility Method Definitions
		partial void OnCreated();
		partial void InsertQuestion(Question instance);
		partial void UpdateQuestion(Question instance);
		partial void DeleteQuestion(Question instance);
		partial void InsertUserRole(UserRole instance);
		partial void UpdateUserRole(UserRole instance);
		partial void DeleteUserRole(UserRole instance);
		partial void InsertSubject(Subject instance);
		partial void UpdateSubject(Subject instance);
		partial void DeleteSubject(Subject instance);
		partial void InsertTestHistory(TestHistory instance);
		partial void UpdateTestHistory(TestHistory instance);
		partial void DeleteTestHistory(TestHistory instance);
		partial void InsertUserAccount(UserAccount instance);
		partial void UpdateUserAccount(UserAccount instance);
		partial void DeleteUserAccount(UserAccount instance);
		#endregion

		public DataClassesSQLDataContext() :
				base(global::LinQ_SQL.Properties.Settings.Default.TestProjectDBConnectionString, mappingSource)
		{
			OnCreated();
		}

		public DataClassesSQLDataContext(string connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public DataClassesSQLDataContext(System.Data.IDbConnection connection) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public DataClassesSQLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public DataClassesSQLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
				base(connection, mappingSource)
		{
			OnCreated();
		}

		public System.Data.Linq.Table<Question> Questions
		{
			get
			{
				return this.GetTable<Question>();
			}
		}

		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}

		public System.Data.Linq.Table<Subject> Subjects
		{
			get
			{
				return this.GetTable<Subject>();
			}
		}

		public System.Data.Linq.Table<TestHistory> TestHistories
		{
			get
			{
				return this.GetTable<TestHistory>();
			}
		}

		public System.Data.Linq.Table<UserAccount> UserAccounts
		{
			get
			{
				return this.GetTable<UserAccount>();
			}
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _QuestionID;

		private string _SubjectID;

		private string _QContent;

		private string _OptionA;

		private string _OptionB;

		private string _OptionC;

		private string _OptionD;

		private string _Answer;

		private string _CreatedBy;

		private System.Nullable<System.DateTime> _CreatedAt;

		private string _ModifiedBy;

		private System.Nullable<System.DateTime> _ModifiedAt;

		private EntityRef<Subject> _Subject;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnQuestionIDChanging(int value);
		partial void OnQuestionIDChanged();
		partial void OnSubjectIDChanging(string value);
		partial void OnSubjectIDChanged();
		partial void OnQContentChanging(string value);
		partial void OnQContentChanged();
		partial void OnOptionAChanging(string value);
		partial void OnOptionAChanged();
		partial void OnOptionBChanging(string value);
		partial void OnOptionBChanged();
		partial void OnOptionCChanging(string value);
		partial void OnOptionCChanged();
		partial void OnOptionDChanging(string value);
		partial void OnOptionDChanged();
		partial void OnAnswerChanging(string value);
		partial void OnAnswerChanged();
		partial void OnCreatedByChanging(string value);
		partial void OnCreatedByChanged();
		partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
		partial void OnCreatedAtChanged();
		partial void OnModifiedByChanging(string value);
		partial void OnModifiedByChanged();
		partial void OnModifiedAtChanging(System.Nullable<System.DateTime> value);
		partial void OnModifiedAtChanged();
		#endregion

		public Question()
		{
			this._Subject = default(EntityRef<Subject>);
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_QuestionID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int QuestionID
		{
			get
			{
				return this._QuestionID;
			}
			set
			{
				if ((this._QuestionID != value))
				{
					this.OnQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._QuestionID = value;
					this.SendPropertyChanged("QuestionID");
					this.OnQuestionIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SubjectID", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
		public string SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_QContent", DbType = "NVarChar(500)")]
		public string QContent
		{
			get
			{
				return this._QContent;
			}
			set
			{
				if ((this._QContent != value))
				{
					this.OnQContentChanging(value);
					this.SendPropertyChanging();
					this._QContent = value;
					this.SendPropertyChanged("QContent");
					this.OnQContentChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OptionA", DbType = "NVarChar(500)")]
		public string OptionA
		{
			get
			{
				return this._OptionA;
			}
			set
			{
				if ((this._OptionA != value))
				{
					this.OnOptionAChanging(value);
					this.SendPropertyChanging();
					this._OptionA = value;
					this.SendPropertyChanged("OptionA");
					this.OnOptionAChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OptionB", DbType = "NVarChar(500)")]
		public string OptionB
		{
			get
			{
				return this._OptionB;
			}
			set
			{
				if ((this._OptionB != value))
				{
					this.OnOptionBChanging(value);
					this.SendPropertyChanging();
					this._OptionB = value;
					this.SendPropertyChanged("OptionB");
					this.OnOptionBChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OptionC", DbType = "NVarChar(500)")]
		public string OptionC
		{
			get
			{
				return this._OptionC;
			}
			set
			{
				if ((this._OptionC != value))
				{
					this.OnOptionCChanging(value);
					this.SendPropertyChanging();
					this._OptionC = value;
					this.SendPropertyChanged("OptionC");
					this.OnOptionCChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_OptionD", DbType = "NVarChar(500)")]
		public string OptionD
		{
			get
			{
				return this._OptionD;
			}
			set
			{
				if ((this._OptionD != value))
				{
					this.OnOptionDChanging(value);
					this.SendPropertyChanging();
					this._OptionD = value;
					this.SendPropertyChanged("OptionD");
					this.OnOptionDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Answer", DbType = "NVarChar(500)")]
		public string Answer
		{
			get
			{
				return this._Answer;
			}
			set
			{
				if ((this._Answer != value))
				{
					this.OnAnswerChanging(value);
					this.SendPropertyChanging();
					this._Answer = value;
					this.SendPropertyChanged("Answer");
					this.OnAnswerChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedBy", DbType = "VarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedAt", DbType = "DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedBy", DbType = "VarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedAt", DbType = "DateTime")]
		public System.Nullable<System.DateTime> ModifiedAt
		{
			get
			{
				return this._ModifiedAt;
			}
			set
			{
				if ((this._ModifiedAt != value))
				{
					this.OnModifiedAtChanging(value);
					this.SendPropertyChanging();
					this._ModifiedAt = value;
					this.SendPropertyChanged("ModifiedAt");
					this.OnModifiedAtChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Subject_Question", Storage = "_Subject", ThisKey = "SubjectID", OtherKey = "SubjectID", IsForeignKey = true, DeleteOnNull = true, DeleteRule = "CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value)
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.Questions.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.Questions.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(string);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.UserRole")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _RoleID;

		private string _RoleName;

		private string _Description;

		private string _CreatedBy;

		private System.Nullable<System.DateTime> _CreatedAt;

		private string _ModifiedBy;

		private System.Nullable<System.DateTime> _ModifiedAt;

		private EntitySet<UserAccount> _UserAccounts;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnRoleIDChanging(string value);
		partial void OnRoleIDChanged();
		partial void OnRoleNameChanging(string value);
		partial void OnRoleNameChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnCreatedByChanging(string value);
		partial void OnCreatedByChanged();
		partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
		partial void OnCreatedAtChanged();
		partial void OnModifiedByChanging(string value);
		partial void OnModifiedByChanged();
		partial void OnModifiedAtChanging(System.Nullable<System.DateTime> value);
		partial void OnModifiedAtChanged();
		#endregion

		public UserRole()
		{
			this._UserAccounts = new EntitySet<UserAccount>(new Action<UserAccount>(this.attach_UserAccounts), new Action<UserAccount>(this.detach_UserAccounts));
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RoleID", DbType = "VarChar(50) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
		public string RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RoleName", DbType = "NVarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedBy", DbType = "VarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedAt", DbType = "DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedBy", DbType = "VarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedAt", DbType = "DateTime")]
		public System.Nullable<System.DateTime> ModifiedAt
		{
			get
			{
				return this._ModifiedAt;
			}
			set
			{
				if ((this._ModifiedAt != value))
				{
					this.OnModifiedAtChanging(value);
					this.SendPropertyChanging();
					this._ModifiedAt = value;
					this.SendPropertyChanged("ModifiedAt");
					this.OnModifiedAtChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "UserRole_UserAccount", Storage = "_UserAccounts", ThisKey = "RoleID", OtherKey = "RoleID")]
		public EntitySet<UserAccount> UserAccounts
		{
			get
			{
				return this._UserAccounts;
			}
			set
			{
				this._UserAccounts.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_UserAccounts(UserAccount entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = this;
		}

		private void detach_UserAccounts(UserAccount entity)
		{
			this.SendPropertyChanging();
			entity.UserRole = null;
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.Subject")]
	public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private string _SubjectID;

		private string _SubjectName;

		private string _Description;

		private string _CreatedBy;

		private System.Nullable<System.DateTime> _CreatedAt;

		private string _ModifiedBy;

		private System.Nullable<System.DateTime> _ModifiedAt;

		private EntitySet<Question> _Questions;

		private EntitySet<TestHistory> _TestHistories;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnSubjectIDChanging(string value);
		partial void OnSubjectIDChanged();
		partial void OnSubjectNameChanging(string value);
		partial void OnSubjectNameChanged();
		partial void OnDescriptionChanging(string value);
		partial void OnDescriptionChanged();
		partial void OnCreatedByChanging(string value);
		partial void OnCreatedByChanged();
		partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
		partial void OnCreatedAtChanged();
		partial void OnModifiedByChanging(string value);
		partial void OnModifiedByChanged();
		partial void OnModifiedAtChanging(System.Nullable<System.DateTime> value);
		partial void OnModifiedAtChanged();
		#endregion

		public Subject()
		{
			this._Questions = new EntitySet<Question>(new Action<Question>(this.attach_Questions), new Action<Question>(this.detach_Questions));
			this._TestHistories = new EntitySet<TestHistory>(new Action<TestHistory>(this.attach_TestHistories), new Action<TestHistory>(this.detach_TestHistories));
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SubjectID", DbType = "VarChar(50) NOT NULL", CanBeNull = false, IsPrimaryKey = true)]
		public string SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SubjectName", DbType = "NVarChar(50)")]
		public string SubjectName
		{
			get
			{
				return this._SubjectName;
			}
			set
			{
				if ((this._SubjectName != value))
				{
					this.OnSubjectNameChanging(value);
					this.SendPropertyChanging();
					this._SubjectName = value;
					this.SendPropertyChanged("SubjectName");
					this.OnSubjectNameChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Description", DbType = "NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedBy", DbType = "VarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedAt", DbType = "DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedBy", DbType = "VarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedAt", DbType = "DateTime")]
		public System.Nullable<System.DateTime> ModifiedAt
		{
			get
			{
				return this._ModifiedAt;
			}
			set
			{
				if ((this._ModifiedAt != value))
				{
					this.OnModifiedAtChanging(value);
					this.SendPropertyChanging();
					this._ModifiedAt = value;
					this.SendPropertyChanged("ModifiedAt");
					this.OnModifiedAtChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Subject_Question", Storage = "_Questions", ThisKey = "SubjectID", OtherKey = "SubjectID")]
		public EntitySet<Question> Questions
		{
			get
			{
				return this._Questions;
			}
			set
			{
				this._Questions.Assign(value);
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Subject_TestHistory", Storage = "_TestHistories", ThisKey = "SubjectID", OtherKey = "SubjectID")]
		public EntitySet<TestHistory> TestHistories
		{
			get
			{
				return this._TestHistories;
			}
			set
			{
				this._TestHistories.Assign(value);
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}

		private void detach_Questions(Question entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}

		private void attach_TestHistories(TestHistory entity)
		{
			this.SendPropertyChanging();
			entity.Subject = this;
		}

		private void detach_TestHistories(TestHistory entity)
		{
			this.SendPropertyChanging();
			entity.Subject = null;
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.TestHistory")]
	public partial class TestHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _TestID;

		private int _UserID;

		private string _SubjectID;

		private System.Nullable<System.DateTime> _TestDate;

		private System.Nullable<int> _CorrectAnswer;

		private System.Nullable<int> _TotalQuestion;

		private System.Nullable<double> _Mark;

		private string _CreatedBy;

		private System.Nullable<System.DateTime> _CreatedAt;

		private string _ModifiedBy;

		private System.Nullable<System.DateTime> _ModifiedAt;

		private EntityRef<Subject> _Subject;

		private EntityRef<UserAccount> _UserAccount;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnTestIDChanging(int value);
		partial void OnTestIDChanged();
		partial void OnUserIDChanging(int value);
		partial void OnUserIDChanged();
		partial void OnSubjectIDChanging(string value);
		partial void OnSubjectIDChanged();
		partial void OnTestDateChanging(System.Nullable<System.DateTime> value);
		partial void OnTestDateChanged();
		partial void OnCorrectAnswerChanging(System.Nullable<int> value);
		partial void OnCorrectAnswerChanged();
		partial void OnTotalQuestionChanging(System.Nullable<int> value);
		partial void OnTotalQuestionChanged();
		partial void OnMarkChanging(System.Nullable<double> value);
		partial void OnMarkChanged();
		partial void OnCreatedByChanging(string value);
		partial void OnCreatedByChanged();
		partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
		partial void OnCreatedAtChanged();
		partial void OnModifiedByChanging(string value);
		partial void OnModifiedByChanged();
		partial void OnModifiedAtChanging(System.Nullable<System.DateTime> value);
		partial void OnModifiedAtChanged();
		#endregion

		public TestHistory()
		{
			this._Subject = default(EntityRef<Subject>);
			this._UserAccount = default(EntityRef<UserAccount>);
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TestID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int TestID
		{
			get
			{
				return this._TestID;
			}
			set
			{
				if ((this._TestID != value))
				{
					this.OnTestIDChanging(value);
					this.SendPropertyChanging();
					this._TestID = value;
					this.SendPropertyChanged("TestID");
					this.OnTestIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", DbType = "Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_SubjectID", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
		public string SubjectID
		{
			get
			{
				return this._SubjectID;
			}
			set
			{
				if ((this._SubjectID != value))
				{
					if (this._Subject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._SubjectID = value;
					this.SendPropertyChanged("SubjectID");
					this.OnSubjectIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TestDate", DbType = "DateTime")]
		public System.Nullable<System.DateTime> TestDate
		{
			get
			{
				return this._TestDate;
			}
			set
			{
				if ((this._TestDate != value))
				{
					this.OnTestDateChanging(value);
					this.SendPropertyChanging();
					this._TestDate = value;
					this.SendPropertyChanged("TestDate");
					this.OnTestDateChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CorrectAnswer", DbType = "Int")]
		public System.Nullable<int> CorrectAnswer
		{
			get
			{
				return this._CorrectAnswer;
			}
			set
			{
				if ((this._CorrectAnswer != value))
				{
					this.OnCorrectAnswerChanging(value);
					this.SendPropertyChanging();
					this._CorrectAnswer = value;
					this.SendPropertyChanged("CorrectAnswer");
					this.OnCorrectAnswerChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_TotalQuestion", DbType = "Int")]
		public System.Nullable<int> TotalQuestion
		{
			get
			{
				return this._TotalQuestion;
			}
			set
			{
				if ((this._TotalQuestion != value))
				{
					this.OnTotalQuestionChanging(value);
					this.SendPropertyChanging();
					this._TotalQuestion = value;
					this.SendPropertyChanged("TotalQuestion");
					this.OnTotalQuestionChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Mark", DbType = "Float")]
		public System.Nullable<double> Mark
		{
			get
			{
				return this._Mark;
			}
			set
			{
				if ((this._Mark != value))
				{
					this.OnMarkChanging(value);
					this.SendPropertyChanging();
					this._Mark = value;
					this.SendPropertyChanged("Mark");
					this.OnMarkChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedBy", DbType = "VarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedAt", DbType = "DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedBy", DbType = "VarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedAt", DbType = "DateTime")]
		public System.Nullable<System.DateTime> ModifiedAt
		{
			get
			{
				return this._ModifiedAt;
			}
			set
			{
				if ((this._ModifiedAt != value))
				{
					this.OnModifiedAtChanging(value);
					this.SendPropertyChanging();
					this._ModifiedAt = value;
					this.SendPropertyChanged("ModifiedAt");
					this.OnModifiedAtChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Subject_TestHistory", Storage = "_Subject", ThisKey = "SubjectID", OtherKey = "SubjectID", IsForeignKey = true, DeleteOnNull = true, DeleteRule = "CASCADE")]
		public Subject Subject
		{
			get
			{
				return this._Subject.Entity;
			}
			set
			{
				Subject previousValue = this._Subject.Entity;
				if (((previousValue != value)
							|| (this._Subject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject.Entity = null;
						previousValue.TestHistories.Remove(this);
					}
					this._Subject.Entity = value;
					if ((value != null))
					{
						value.TestHistories.Add(this);
						this._SubjectID = value.SubjectID;
					}
					else
					{
						this._SubjectID = default(string);
					}
					this.SendPropertyChanged("Subject");
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "UserAccount_TestHistory", Storage = "_UserAccount", ThisKey = "UserID", OtherKey = "UserID", IsForeignKey = true, DeleteOnNull = true, DeleteRule = "CASCADE")]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value)
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.TestHistories.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.TestHistories.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}

	[global::System.Data.Linq.Mapping.TableAttribute(Name = "dbo.UserAccount")]
	public partial class UserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{

		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

		private int _UserID;

		private string _RoleID;

		private string _Username;

		private string _Password;

		private string _FullName;

		private string _Email;

		private string _PhoneNumber;

		private string _Address;

		private System.Nullable<System.DateTime> _Birthday;

		private string _Note;

		private string _CreatedBy;

		private System.Nullable<System.DateTime> _CreatedAt;

		private string _ModifiedBy;

		private System.Nullable<System.DateTime> _ModifiedAt;

		private EntitySet<TestHistory> _TestHistories;

		private EntityRef<UserRole> _UserRole;

		#region Extensibility Method Definitions
		partial void OnLoaded();
		partial void OnValidate(System.Data.Linq.ChangeAction action);
		partial void OnCreated();
		partial void OnUserIDChanging(int value);
		partial void OnUserIDChanged();
		partial void OnRoleIDChanging(string value);
		partial void OnRoleIDChanged();
		partial void OnUsernameChanging(string value);
		partial void OnUsernameChanged();
		partial void OnPasswordChanging(string value);
		partial void OnPasswordChanged();
		partial void OnFullNameChanging(string value);
		partial void OnFullNameChanged();
		partial void OnEmailChanging(string value);
		partial void OnEmailChanged();
		partial void OnPhoneNumberChanging(string value);
		partial void OnPhoneNumberChanged();
		partial void OnAddressChanging(string value);
		partial void OnAddressChanged();
		partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
		partial void OnBirthdayChanged();
		partial void OnNoteChanging(string value);
		partial void OnNoteChanged();
		partial void OnCreatedByChanging(string value);
		partial void OnCreatedByChanged();
		partial void OnCreatedAtChanging(System.Nullable<System.DateTime> value);
		partial void OnCreatedAtChanged();
		partial void OnModifiedByChanging(string value);
		partial void OnModifiedByChanged();
		partial void OnModifiedAtChanging(System.Nullable<System.DateTime> value);
		partial void OnModifiedAtChanged();
		#endregion

		public UserAccount()
		{
			this._TestHistories = new EntitySet<TestHistory>(new Action<TestHistory>(this.attach_TestHistories), new Action<TestHistory>(this.detach_TestHistories));
			this._UserRole = default(EntityRef<UserRole>);
			OnCreated();
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_UserID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_RoleID", DbType = "VarChar(50) NOT NULL", CanBeNull = false)]
		public string RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._UserRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Username", DbType = "VarChar(50)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Password", DbType = "VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_FullName", DbType = "NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Email", DbType = "VarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_PhoneNumber", DbType = "VarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Address", DbType = "NVarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Birthday", DbType = "DateTime")]
		public System.Nullable<System.DateTime> Birthday
		{
			get
			{
				return this._Birthday;
			}
			set
			{
				if ((this._Birthday != value))
				{
					this.OnBirthdayChanging(value);
					this.SendPropertyChanging();
					this._Birthday = value;
					this.SendPropertyChanged("Birthday");
					this.OnBirthdayChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_Note", DbType = "NVarChar(50)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedBy", DbType = "VarChar(50)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_CreatedAt", DbType = "DateTime")]
		public System.Nullable<System.DateTime> CreatedAt
		{
			get
			{
				return this._CreatedAt;
			}
			set
			{
				if ((this._CreatedAt != value))
				{
					this.OnCreatedAtChanging(value);
					this.SendPropertyChanging();
					this._CreatedAt = value;
					this.SendPropertyChanged("CreatedAt");
					this.OnCreatedAtChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedBy", DbType = "VarChar(50)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage = "_ModifiedAt", DbType = "DateTime")]
		public System.Nullable<System.DateTime> ModifiedAt
		{
			get
			{
				return this._ModifiedAt;
			}
			set
			{
				if ((this._ModifiedAt != value))
				{
					this.OnModifiedAtChanging(value);
					this.SendPropertyChanging();
					this._ModifiedAt = value;
					this.SendPropertyChanged("ModifiedAt");
					this.OnModifiedAtChanged();
				}
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "UserAccount_TestHistory", Storage = "_TestHistories", ThisKey = "UserID", OtherKey = "UserID")]
		public EntitySet<TestHistory> TestHistories
		{
			get
			{
				return this._TestHistories;
			}
			set
			{
				this._TestHistories.Assign(value);
			}
		}

		[global::System.Data.Linq.Mapping.AssociationAttribute(Name = "UserRole_UserAccount", Storage = "_UserRole", ThisKey = "RoleID", OtherKey = "RoleID", IsForeignKey = true, DeleteOnNull = true, DeleteRule = "CASCADE")]
		public UserRole UserRole
		{
			get
			{
				return this._UserRole.Entity;
			}
			set
			{
				UserRole previousValue = this._UserRole.Entity;
				if (((previousValue != value)
							|| (this._UserRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRole.Entity = null;
						previousValue.UserAccounts.Remove(this);
					}
					this._UserRole.Entity = value;
					if ((value != null))
					{
						value.UserAccounts.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(string);
					}
					this.SendPropertyChanged("UserRole");
				}
			}
		}

		public event PropertyChangingEventHandler PropertyChanging;

		public event PropertyChangedEventHandler PropertyChanged;

		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}

		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		private void attach_TestHistories(TestHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}

		private void detach_TestHistories(TestHistory entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
	}
}
#pragma warning restore 1591
